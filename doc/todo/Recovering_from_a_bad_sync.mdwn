Instead of using `sync origin` for the first sync and a simple `sync` for the other syncs,

    # on pc1
    git annex init "pc1"
    git annex direct
    git annex add .
    git annex sync origin # remote specified on the first sync

    # add some files
    git annex add .
    git annex sync

I used `sync` first and only later I used `sync origin`

     # on pc1
    git annex init "pc1"
    git annex direct
    git annex add .
    git annex sync

    # add some files
    git annex add .
    git annex sync origin  # remote specified on a later sync

These sequences of commands create two completely different git histories.

More important, if one clones on pc2 the first repository, they will see both the pc1 remote and the pc2 remote. Instead, if one clones on pc2 the repository created by the second combination of commands, they will see only the pc2 remote.

What commands should I use on pc1 to fix the history so that when pc2 clones from the origin repository it will see both the pc1 remote and its own local remote?

> [[done]]; fixed per my comments. --[[Joey]]
