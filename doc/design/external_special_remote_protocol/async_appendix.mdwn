(This is a draft and not implemented yet.)

This is an appendix to the [[external_special_remote_protocol]].

[[!toc]]

## introduction

Normally, an external special remote can only be used to do one thing at a
time, and when git-annex has concurrency enabled, it will start up multiple
processes for the same external special remote. 

This extension lets a single external special remote process handle
multiple concurrent jobs, which can be useful if multiple processes
would use too many resources, or if it can be better coordinated using a
single process.

## protocol overview

As usual, the protocol starts by the external special remote sending
the version of the protocol it's using.
	
	VERSION 1

This extension is negotiated by git-annex sending an `EXTENSIONS` message
that includes `ASYNC`, and the external special remote responding in kind.

	EXTENSIONS INFO ASYNC
	EXTENSIONS ASYNC

From this point forward, every message in the protocol is tagged with a job
number, by prefixing it with "J n". 

As usual, the first message git-annex sends is generally PREPARE:

	J 1 PREPARE

Rather than just responding PREPARE-SUCCESS, the job number has to be
included in the reply:

	J 1 PREPARE-SUCCESS

Suppose git-annex wants to make some transfers. It can request several
at the same time, using different job numbers:

	J 2 TRANSFER RETRIEVE Key1 file1
	J 3 TRANSFER RETRIEVE Key2 file2

The special remote can now perform both transfers at the same time.
If it sends PROGRESS messages for these transfers, they have to be tagged
with the job number:
	
	J 2 PROGRESS 10
	J 3 PROGRESS 500
	J 2 PROGRESS 20

The special remote can also send messages that query git-annex for some
information. These messages and the reply will also be tagged with a job
number.

	J 2 GETCONFIG url
	J 4 RETRIEVE Key3 file3
	J 2 VALUE http://example.com/

One transfers are done, the special remote sends `TRANSFER-SUCCESS` tagged
with the job number.

	J 3 TRANSFER-SUCCESS RETRIEVE Key2
	J 2 PROGRESS 100
	J 2 TRANSFER-SUCCESS RETRIEVE Key1

Lots of different jobs can be requested at the same time.

	J 4 CHECKPRESENT Key3
	J 5 CHECKPRESENT Key4
	J 6 REMOVE Key3
	J 4 CHECKPRESENT-SUCCESS Key3
	J 6 REMOVE-SUCCESS Key3
	J 5 CHECKPRESENT-FAILURE Key4

A job always starts with a request by git-annex, and once the special
remote sends a reply -- or replies -- to that request, the job is done.

An example of sending multiple replies to a request is `LISTCONFIGS`, eg:

	J 7 LISTCONFIGS
	J 7 CONFIG foo some config
	J 7 CONFIG bar other config
	J 7 CONFIGEND

Job numbers are not reused within a given run of a special remote,
but once git-annex has seen the last message it expects for a job,
sending other messages tagged with that job number will be rejected
as a protocol error.

To avoid overflow, job numbers should be treated as at least 64 bit
values (or as strings) by the special remote.
