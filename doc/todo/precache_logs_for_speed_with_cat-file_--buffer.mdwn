Like --all was sped up 2x-16x in 
[[!commit d010ab04be5a8d74fe85a2fa27a853784d1f9009]], commands
that ls-files the worktree may be sped up by using cat-file --buffer
to get location logs (and maybe other logs) more efficiently,
and precache them.

> The precachelog branch adds location log precaching for `git annex get`
> only. But it benchmarks 4x *slower*. (Even if it were faster, it would
> have needed more work, because limits are matched before location log
> precaching, so if any limit like --in is used that uses the location
> log, it will actually be read twice.) This is a surprising result,
> and I don't understand why it's slower, but backburnered this
> optimisation for now.
>
> > Hmm, but `git annex get` does not need location log access when
> > the object is already present. So that was the wrong thing to benchmark
> > this with. `copy --to` would be a better benchmark. To speed up get,
> > it would need to check inAnnex before caching the location log.

Another thing that the same cat-file --buffer approach could be used with
is to cat the annex links. Git.LsFiles.inRepoDetails provides the Sha
of file contents, which can be fed through cat-file --buffer to get keys.
A complication is that, non-symlinks could be large files that are not
annexed but in git; don't want to cat those when looking for annex links.
That would probably need pre-filtering through a cat-file --buffer that
only gets the size of the blob, not its content.

> This was a win! Nearly 2x faster `git-annex get` seeking.

Some calls to ifAnnexed, whenAnnexed, lookupKey remain, and the above could
be used to remove them and make it faster. In particular, Command.Sync has
a ifAnnexed.

Also, limits that look up keys still do a key lookup, before the key is
looked up efficiently. (Before these changes, the same key lookup was done
2x too..) Avoiding that would speed up --in etc, probably another 1.5x-2x
speedup when such limits are used. What that optimisation needs is a way to
tell if the current limit needs the key or not. If it does, then match on
it after getting the key, otherwise before getting the key.
