#!/bin/sh
# Runs a shell command (or interactive shell) using the binaries and
# libraries bundled with this app.

set -e

base="$(dirname $0)"

if [ ! -d "$base" ]; then
	echo "** cannot find base directory (I seem to be $0)" >&2
	exit 1
fi

if [ ! -e "$base/bin/git-annex" ]; then
	echo "** base directory $base does not contain bin/git-annex" >&2
	exit 1
fi
if [ ! -e "$base/bin/git" ]; then
	echo "** base directory $base does not contain bin/git" >&2
	exit 1
fi

# Get absolute path to base, to avoid breakage when things change directories.
orig="$(pwd)"
cd "$base"
base="$(pwd)"
cd "$orig"

# Install shim that's used to run git-annex-shell from ssh authorized_keys.
# The assistant also does this when run, but the user may not be using the
# assistant.
if [ ! -e "$HOME/.ssh/git-annex-shell" ]; then
	mkdir "$HOME/.ssh" >/dev/null 2>&1 || true
	(
		echo "#!/bin/sh"
		echo "set -e"
		echo "exec $base/runshell git-annex-shell -c \"\$SSH_ORIGINAL_COMMAND\""
	) > "$HOME/.ssh/git-annex-shell"
	chmod +x "$HOME/.ssh/git-annex-shell"
fi

# Put our binaries first, to avoid issues with out of date or incompatable
# system binaries.
ORIG_PATH="$PATH"
export ORIG_PATH
PATH=$base/bin:$PATH
export PATH

# This makes the linker first look in the library directories bundled
# in this app. Only if it fails to find a library there will a system
# library be used.
# 
# This seems to work better than DYLD_LIBRARY_PATH, which can force
# the wrong version of a library to be used, if the app bundles two
# different versions of a single library. And it seems to work better
# than DYLD_FALLBACK_LIBRARY_PATH, which fails to override old system
# versions of libraries when a program in the app needs a newer version.
#ORIG_DYLD_ROOT_PATH="$DYLD_ROOT_PATH"
#export ORIG_DYLD_ROOT_PATH
#DYLD_ROOT_PATH=$base
#export DYLD_ROOT_PATH

ORIG_GIT_EXEC_PATH="$GIT_EXEC_PATH"
export ORIG_GIT_EXEC_PATH
GIT_EXEC_PATH=$base
export GIT_EXEC_PATH

# Indicate which variables were exported above.
GIT_ANNEX_STANDLONE_ENV="PATH GIT_EXEC_PATH"
export GIT_ANNEX_STANDLONE_ENV

if [ "$1" ]; then
	cmd="$1"
	shift 1
	exec "$cmd" "$@"
else
	sh
fi
