Some remotes like S3 support versioning of data stored in them.
When git-annex updates an export, it deletes the old
content from eg the S3 bucket, but with versioning enabled, S3 retains the
content and it can be accessed using a version ID (that S3 returns when
storing the content). So it should be possible for git-annex to allow
downloading old versions of files from such a remote.

## remote pair approach

One way would be to have the S3 remote, when storing a file to a S3 bucket
that is known to support versioning, to add an url using the S3 version ID
to the web remote.

However, some remotes that support versioning won't be accessible via the
web, so that's not a general solution.

(Also, S3 buckets only support web access when configured to be public.)

This generalizes to a pair of remotes, it could be S3+web or S3 could instantiate
two remotes automatically, and use the second for versioned data.

Note that location tracking info has to be carefully managed, to avoid
there appearing to be two copies of data that's only really stored in one place.
When uploading to S3, it should not yet add the url or mark the content 
as present in the web. Then when dropping from S3, after the
drop succeeds, it can mark the content as present in the web and add its url.

There's a potential race there still, since the remote does not update location
tracking when dropping, the caller of the remote does. So if S3 marks content
as being present in the web, it will breifly appear present in both locations
and break numcopies counting. Would need to extend the API to avoid this race.

> Ah, but: exporttree remotes are always untrusted for other reasons,
> so location tracking is less of a problem. Even if location tracking
> shows the content in two places, a drop will skip the exporttree remote
> so will only treat the pair as one copy.
> 
> So the location tracking problem is limited to --copies=N matching incorrectly,
> and whereis listing both locations, and some preferred content 
> expressions behaving in surprising ways.

Unfortunately this remote pair approach will leak out into git-annex's interface;
it will show two remotes. Not a problem for S3+web really, but if S3 instantiates
an S3oldversions remote, that necessarily adds the potential for confusion,
and adds complexity in configuration of preferred content settings, repo groups,
etc.

> Could flip it; make the main remote track the versioned data, and the
> exporttree remote be secondary. Since only git-annex export/sync need to
> access that remote, they could have a special case to look for such a
> secondary remote and act on it. All other commands would only operate on
> the main remote. Indeed, the secondary remote would not need to be
> in the RemoteList at all.
> 
> Doesn't avoid preferred content etc complexity, still.

## location tracking approach

Another way is to store the S3 version ID in git-annex branch and support
downloading using it. But this has the problem that dropping makes
git-annex think it's not in S3 any more, while what we want for export
is for it to be removed from the current bucket, but still tracked as
present in S3.

The drop from S3 could fail, or "succeed" in a way that prevents the location
tracking being updated to say it lacks the content. Failing is how bup deals
with it. It seems confusing to have a drop appear to succeed but not really drop,
especially since dropping again would seem to do something a second time.

This does mean that git-annex drop/sync --content/assistant might try to do a
lot of drops from the remote, and generate a lot of noise when they fail.
Which is kind of ok for drop, since the user should be told that they can't
delete the data. Could add a way to say "this remote does not support drop",
and make at sync --content/assistant use that.

Note that git-annex export does not rely on location tracking to determine
which files still need to be sent to an export. It uses the export database
to keep track of that.

## final plan

Add an "appendOnly" field to Remote, indicating it retains all content stored
in it.

Let S3 remotes be configured with versioned=yes or something like that
(what does S3 call the feature?) which enables appendOnly.

Make S3 store version IDs for uploaded keys in the per-remote log when so
configured, and use them for when retrieving keys and for checkpresent.

Make S3 refuse to removeKey when configured appendOnly, failing with an error.

Make `git annex export` check appendOnly when removing a file from an
export, and not update the location log, since the remote still contains
the content.

Make git-annex sync and the assistant skip trying to drop from appendOnly
remotes since it's just going to fail.

Make exporttree=yes remotes that are appendOnly be trusted, and not force
verification of content, since the usual concerns about losing data when an
export is updated by someone else don't apply.

Make bup an appendOnly remote.

When a file was deleted from an exported tree, and then put back
in a later exported tree, it might get re-uploaded even though the content
is still retained in the versioned remote. S3 might have a way to avoid
such a redundant upload, if so it could support using it.
