[[!comment format=mdwn
 username="joey"
 subject="""comment 1"""
 date="2019-02-05T18:45:10Z"
 content="""
I'm not sure there's a bug here. It sounds like your repository's git-annex
branch was out of date, and so it did not know about a change to the
location of the files.

For example, I can replicate the error message like this:

	joey@darkstar:/tmp> git init A
	joey@darkstar:/tmp> cd A
	joey@darkstar:/tmp/A> git annex init
	joey@darkstar:/tmp/A> touch file
	joey@darkstar:/tmp/A> git annex add file
	joey@darkstar:/tmp/A> git commit -m added
	joey@darkstar:/tmp/A> cd ..
	joey@darkstar:/tmp> git clone A B
	joey@darkstar:/tmp> cd B
	joey@darkstar:/tmp/B> git annex move --from origin
	joey@darkstar:/tmp/B> git annex get # this succeeds
	joey@darkstar:/tmp/B> cd ..
	joey@darkstar:/tmp> cd A
	joey@darkstar:/tmp/A> git annex get
	get file (not available)
	  No other repository is known to contain the file.
	failed
	git-annex: get: 1 failed

Here repo A has out-of-date information in its git-annex branch;
it doesn't know that the file content was moved to repo B.
Running `git annex sync` in A does not improve matters, because A has
no connection to repo B. But once the updated git-annex branch does
reach repo A, it will again know:

	joey@darkstar:/tmp/A> cd ../B
	joey@darkstar:/tmp/B> git annex sync
	joey@darkstar:/tmp/B> cd ../A
	joey@darkstar:/tmp/B>cd ../A
	joey@darkstar:/tmp/A>git annex get
	get file (not available) 
	  Try making some of these repositories available:
	  	b7bc6700-0009-457c-b490-0531bb830d80 -- joey@darkstar:/tmp/B


Here running git-annex sync in B was enough to get the git-annex branch
synced up, because B has a connection to A, but in your situation,
depending on the topology of your repositories, you may need to do
something else.
"""]]
