Simple, when performing various git annex command over ssh, in particular a multi-file get, and using password authentication, git annex will prompt more than once for a user password.  This makes batch updates very inconvenient.

> I'd suggest using ssh-agent, or a passwordless ssh key. Possibly in
> combination with [[git-annex-shell]] if you want to lock down a
> particular ssh key to only being able to use git-annex and git-daemon.
> 
> Combining multiple operations into a single ssh is on the todo list, but
> very far down it. --[[Joey]]

>> OTOH, automatically running ssh in ControlMaster mode (and stopping it
>> at exit) would be useful and not hard thing for git-annex to do.
>> 
>> It'd just need to set the appropriate config options, setting
>> ControlPath to a per-remote socket location that includes git-annex's
>> pid. Then at shutdown, run `ssh -O exit` on each such socket.
>> 
>> Complicated slightly by not doing this if the user has already set up
>> more broad ssh connection caching. --[[Joey]]

---

Slightly more elaborate design for using ssh connection caching:

* Per-uuid ssh socket in `.git/annex/ssh/user@host.socket`
* Can be shared amoung concurrent git-annex processes.
* Run ssh like: `ssh -S .git/annex/ssh/user@host.socket -o ControlMaster=auto -o ControlPersist=yes user@host`
* At shutdown, enumerate all existing sockets, and on each:
  1. Rename to .old (prevents various races)
  2. `ssh -q -S .git/annex/ssh/user@host.old -o ControlMaster=auto -o ControlPersist=yes -O stop user@host`
     (Will exit nonzero if ssh is not running on that socket.)
  3. And then remove the socket.
* Do same *at startup*. Why? In case an old git-annex was interrupted
  and left behind a ssh. May have moved to a different network
  in the meantime, etc, and be stalled waiting for a response from the
  network, or talking to the wrong interface or something.
  (Ie, the reason why I don't use ssh connection caching by default.)
* This would stop ssh's used by a concurrently running git-annex,
  but only after they finish servicing their current connection.
  Could use locks to detect if another git-annex is using a ssh
  socket, but concurrent git-annex is rare enough, and the impact small
  enough (next ssh it runs needs to do a full connect), that
  the locks are probably not justified. Could be added later if needed tho.
* Could also set ControlPersist to something like "1h", in order to
  auto-terminate leftover ssh's when git-annex is ctrl-c'd or somehow
  exits. When transferring big enough files that the next ssh doesn't
  happen for an hour, the overhead of that ssh needing to reconnect is
  not significant.
* User should be able to override this, to use their own preferred
  connection caching setup. `annex.sshcaching=false`
