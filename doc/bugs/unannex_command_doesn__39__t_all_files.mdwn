    $ git init ; git annex init test ; dd if=/dev/urandom of=file1 count=128 ; cp file1 file2 ; git annex add --backend=SHA1 file? ; git commit -m init ; git annex unannex ; ls -l
    Initialized empty Git repository in /tmp/annex/.git/
    init test ok
    128+0 records in
    128+0 records out
    65536 bytes (66 kB) copied, 0.007173 s, 9.1 MB/s
    add file1 (checksum...) ok
    add file2 (checksum...) ok
    (Recording state in git...)
    [master (root-commit) 2177b10] init
     2 files changed, 2 insertions(+), 0 deletions(-)
     create mode 120000 file1
     create mode 120000 file2
    unannex file1 ok
    (Recording state in git...)
    [master bef78b1] content removed from git annex
     1 files changed, 0 insertions(+), 1 deletions(-)
     delete mode 120000 file1
    total 72
    -rw-r--r-- 1 simons users 65536 Jul 15 17:29 file1
    lrwxrwxrwx 1 simons users   132 Jul 15 17:29 file2 -> .git/annex/objects/jp/Fk/SHA1-s65536--795b58cc4e5190b02e7026fd9e94a10c98c6475f/SHA1-s65536--795b58cc4e5190b02e7026fd9e94a10c98c6475f

> This was recently discussed in
> [[annex_unannex__47__uninit_should_handle_copies]] and `unannex --fast`
> added to leave contents behind in the annex, which allows handling
> copies. But needs manual cleanup later with dropunused. --[[Joey]] 

> This is basically a dup of [[Large unannex operations result in stale symlinks and data loss]],
> or at least the ideas in there will also deal with this. Closing as dupe.
> [[done]] --[[Joey]] 
